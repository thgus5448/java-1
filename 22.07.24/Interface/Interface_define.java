package Interface;

/* 인터페이스(interface)
 * 객체의 사용 방법을 정의한 타입.
 * 객체의 교환성을 높여줌 = 다형성의 매우 중요한 역할
 * 
 * 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출함.
 * = 개발 코드는 객체의 내부 구조를 알 필요가 없고 인터페이스의 메소드만 알고 있으면 됨.
 * 
 * 개발 코드가 직접 객체의 메소드를 호출하면 되는데 왜 중간에 인터페이스를 둘까?
 * 개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 하기 위해서 
 * 
 * 
 * ★ 클래스와 인터페이스의 차이점
 * 클래스의 구성 멤버 : 변수, 생성자, 메소드
 * 인터페이스의 구성 멤버 : 상수, 메소드 (인터페이스는 객체로 생성할 수 없기 때문에 생성자를 가질 수 없다.)
 * 
 * 선언 방법
 * 자바7 : 실행 블록이 없는 추상 메소드
 * 자바8 : 실행 블록이 없는 추상 메소드 + 디폴트 메소드 + 정적 메소드
 * 
 * 선언 방법 예)
 * public interface 인터페이스명 {
 * 	//상수
 * 	타입	상수명 = 값;
 * 
 *	//추상 메소드
 *	타입 메소드명(매개변수, ...);
 *
 *	//디폴트 메소드
 *	default 타입 메소드명(매개변수, ...) {...}
 *
 *	//정적 메소드
 *	static 타입	메소드명(매개변수) {...}
 * }
 * 
 * 개발 코드가 인터페이스를 호출한다면?
 * 인터페이스는 객체의 메소드를 호출함.
 * 객체는 인터페이스에서 정의된 추상 메소드와 동일한 메소드 이름, 매개 타입, 리턴 타입을 가진 실체 메소드를 가지고 있어야 함 
 * 	이 조건이 맞는 객체 = 인터페이스의 구현(implement) 객체
 * 	구현 객체를 생성하는 클래스 = 구현 클래스
 *  어떻게 생성하는지는 Television.java에서......
 */

public class Interface_define {
	
}
